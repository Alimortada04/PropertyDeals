Thanks for sharing those updated screenshots — this confirms that no new entries are appearing in the auth.users table despite the attempted registrations. That means:

The entire sign-up transaction is failing at the Supabase Auth level before any post-processing (like inserting into buyer_profile) can even begin.

✅ What's 100% Confirmed
✅ Your buyer_profile is the only expected profile table — no profiles table exists

✅ You're properly calling supabase.auth.signUp(...) with valid data

❌ Supabase is returning 500 Internal Server Error: Database error saving new user

❌ No rows appear in auth.users, which confirms the insert is being blocked or rolled back

🔍 This confirms there is still a broken trigger, policy, or stored function on or related to auth.users

🔧 Let's Fix This Directly — Here's the Plan:
✅ Step 1: List all Triggers on auth.users
Run this in Supabase SQL Editor:

sql
Copy
Edit
SELECT trigger_name, action_statement
FROM information_schema.triggers
WHERE event_object_table = 'users';
You’ll likely find a trigger like create_profile_on_signup or create_user_profile.

✅ Step 2: Drop Broken Trigger(s)
Run this to disable the known issue:

sql
Copy
Edit
DROP TRIGGER IF EXISTS create_profile_on_signup ON auth.users;
DROP TRIGGER IF EXISTS create_user_profile ON auth.users;
✅ You can always rebuild a working one later for buyer_profile.

✅ Step 3: Drop Broken Function(s) (if needed)
If any trigger references a function like create_profile(), handle_new_user(), etc. that inserts into a missing profiles table, remove it with:

sql
Copy
Edit
DROP FUNCTION IF EXISTS create_profile;
DROP FUNCTION IF EXISTS handle_new_user;
✅ Optional: Clean New Trigger for buyer_profile
Once you've cleared the broken logic, you can safely add a working auto-insert like this:

sql
Copy
Edit
-- Create function to insert into buyer_profile
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
  INSERT INTO public.buyer_profile (id, email, full_name)
  VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add trigger
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE FUNCTION public.handle_new_user();
