import { 
  users, type User, type InsertUser, 
  properties, type Property, type InsertProperty, 
  propertyInquiries, type PropertyInquiry, type InsertPropertyInquiry,
  reps, type Rep, type InsertRep, 
  repReviews, type RepReview, type InsertRepReview,
  repListings, type RepListing, type InsertRepListing,
  repDeals, type RepDeal, type InsertRepDeal,
  repActivity, type RepActivity, type InsertRepActivity,
  repConnections, type RepConnection, type InsertRepConnection
} from "@shared/schema";
import session from "express-session";
import createMemoryStore from "memorystore";

const MemoryStore = createMemoryStore(session);

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Property operations
  getProperties(): Promise<Property[]>;
  getProperty(id: number): Promise<Property | undefined>;
  getPropertyBySeller(sellerId: number): Promise<Property[]>;
  createProperty(property: InsertProperty): Promise<Property>;
  updateProperty(id: number, property: Partial<Property>): Promise<Property | undefined>;
  deleteProperty(id: number): Promise<boolean>;
  
  // Property inquiry operations
  getPropertyInquiries(propertyId: number): Promise<PropertyInquiry[]>;
  getSellerInquiries(sellerId: number): Promise<PropertyInquiry[]>;
  createPropertyInquiry(inquiry: InsertPropertyInquiry): Promise<PropertyInquiry>;
  
  // REP operations
  getReps(): Promise<Rep[]>;
  getRep(id: number): Promise<Rep | undefined>;
  createRep(rep: InsertRep): Promise<Rep>;
  updateRep(id: number, rep: Partial<Rep>): Promise<Rep | undefined>;
  
  // REP reviews operations
  getRepReviews(repId: number): Promise<RepReview[]>;
  createRepReview(review: InsertRepReview): Promise<RepReview>;
  
  // REP listings operations
  getRepListings(repId: number): Promise<RepListing[]>;
  createRepListing(listing: InsertRepListing): Promise<RepListing>;
  
  // REP deals operations
  getRepDeals(repId: number): Promise<RepDeal[]>;
  createRepDeal(deal: InsertRepDeal): Promise<RepDeal>;
  
  // REP activity operations
  getRepActivity(repId: number): Promise<RepActivity[]>;
  createRepActivity(activity: InsertRepActivity): Promise<RepActivity>;
  
  // REP connections operations
  getRepConnections(repId: number): Promise<RepConnection[]>;
  createRepConnection(connection: InsertRepConnection): Promise<RepConnection>;
  
  // Session store
  sessionStore: session.Store;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private properties: Map<number, Property>;
  private propertyInquiries: Map<number, PropertyInquiry>;
  private reps: Map<number, Rep>;
  private repReviews: Map<number, RepReview>;
  private repListings: Map<number, RepListing>;
  private repDeals: Map<number, RepDeal>;
  private repActivities: Map<number, RepActivity>;
  private repConnections: Map<number, RepConnection>;
  
  currentUserId: number;
  currentPropertyId: number;
  currentInquiryId: number;
  currentRepId: number;
  currentRepReviewId: number;
  currentRepListingId: number;
  currentRepDealId: number;
  currentRepActivityId: number;
  currentRepConnectionId: number;
  
  sessionStore: session.Store;

  constructor() {
    this.users = new Map();
    this.properties = new Map();
    this.propertyInquiries = new Map();
    this.reps = new Map();
    this.repReviews = new Map();
    this.repListings = new Map();
    this.repDeals = new Map();
    this.repActivities = new Map();
    this.repConnections = new Map();
    
    this.currentUserId = 1;
    this.currentPropertyId = 1;
    this.currentInquiryId = 1;
    this.currentRepId = 1;
    this.currentRepReviewId = 1;
    this.currentRepListingId = 1;
    this.currentRepDealId = 1;
    this.currentRepActivityId = 1;
    this.currentRepConnectionId = 1;
    
    this.sessionStore = new MemoryStore({
      checkPeriod: 86400000, // prune expired entries every 24h
    });
    
    // Create initial sample data
    this.initSampleData();
  }

  private initSampleData() {
    // Create users
    const sellerId = this.currentUserId++;
    const seller: User = {
      id: sellerId,
      username: "seller",
      password: "$2b$10$7O7BgKCexvkgIXR.OJNyEOQgwmRNzWw1Z1zXx3Zd2YEZjg1UhGnkK", // "password"
      fullName: "John Seller",
      email: "seller@propertydeals.com",
      userType: "seller"
    };
    this.users.set(sellerId, seller);
    
    const seller2Id = this.currentUserId++;
    const seller2: User = {
      id: seller2Id,
      username: "investor",
      password: "$2b$10$7O7BgKCexvkgIXR.OJNyEOQgwmRNzWw1Z1zXx3Zd2YEZjg1UhGnkK", // "password"
      fullName: "Sarah Investor",
      email: "sarah@propertydeals.com",
      userType: "seller"
    };
    this.users.set(seller2Id, seller2);
    
    // Create sample REPs
    this.initSampleReps();
  }
  
  private initSampleReps() {
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
    
    const twoYearsAgo = new Date();
    twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);
    
    // Sample REPs
    const sampleReps = [
      {
        name: "Michael Johnson",
        title: "Real Estate Agent",
        avatar: "https://images.unsplash.com/photo-1560250097-0b93528c311a",
        banner: "https://images.unsplash.com/photo-1511452885600-a3d2c9148a31",
        verified: true,
        topRep: true,
        pdCertified: true,
        location: "Chicago, IL",
        company: "Elite Realty Group",
        companyUrl: "https://eliterealty.com",
        memberSince: twoYearsAgo,
        bio: "With over 15 years of experience in Chicago's real estate market, I specialize in finding off-market deals and investment properties with excellent ROI potential. My background in construction helps me accurately estimate rehab costs and identify properties with hidden value.",
        available: true,
        contactInfo: JSON.stringify({
          email: "michael@propertydeals.com",
          phone: "(312) 555-7890",
          website: "https://michaeljohnson.realtor"
        }),
        specialties: ["Off-Market Deals", "Investment Properties", "Rehab Estimates", "Multi-Family"],
        areas: ["Chicago - North Side", "Chicago - West Loop", "Evanston", "Oak Park"],
        socialLinks: JSON.stringify({
          facebook: "https://facebook.com/michaeljohnsonrealtor",
          instagram: "https://instagram.com/michaeljohnsonrealtor",
          twitter: "https://twitter.com/michaeljohnsonrealtor",
          linkedin: "https://linkedin.com/in/michaeljohnsonrealtor"
        }),
        stats: JSON.stringify({
          dealsClosed: 87,
          activeListings: 12,
          rating: 4.8,
          reviewCount: 42,
          responseRate: 98
        })
      },
      {
        name: "Jennifer Martinez",
        title: "Investment Specialist",
        avatar: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2",
        banner: "https://images.unsplash.com/photo-1600596542815-ffad4c1539a9",
        verified: true,
        topRep: true,
        pdCertified: true,
        location: "Miami, FL",
        company: "South Beach Investments",
        companyUrl: "https://southbeachinvestments.com",
        memberSince: oneYearAgo,
        bio: "I help investors identify and acquire lucrative properties in the Miami metro area. My specialty is finding distressed properties with high potential ROI. With a background in finance and real estate law, I provide comprehensive guidance through the entire acquisition process.",
        available: true,
        contactInfo: JSON.stringify({
          email: "jennifer@propertydeals.com",
          phone: "(305) 555-1234",
          website: "https://jennifermartinez.realtor"
        }),
        specialties: ["Distressed Properties", "BRRRR Strategy", "Wholesale Deals", "Cash Flow Properties"],
        areas: ["Miami Beach", "Brickell", "Coral Gables", "Fort Lauderdale"],
        socialLinks: JSON.stringify({
          facebook: "https://facebook.com/jennifermartinezrealtor",
          instagram: "https://instagram.com/jennifermartinezrealtor",
          linkedin: "https://linkedin.com/in/jennifermartinezrealtor"
        }),
        stats: JSON.stringify({
          dealsClosed: 54,
          activeListings: 8,
          rating: 4.9,
          reviewCount: 35,
          responseRate: 95
        })
      },
      {
        name: "David Chen",
        title: "Commercial Real Estate Broker",
        avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e",
        banner: "https://images.unsplash.com/photo-1497366754035-f200968a6e72",
        verified: true,
        topRep: false,
        pdCertified: true,
        location: "San Francisco, CA",
        company: "Bay Area Commercial",
        companyUrl: "https://bayareacommercial.com",
        memberSince: sixMonthsAgo,
        bio: "Specializing in commercial real estate throughout the Bay Area, I help investors identify prime opportunities in office buildings, retail spaces, and multi-use developments. My analytical approach and market knowledge enable my clients to make informed investment decisions.",
        available: true,
        contactInfo: JSON.stringify({
          email: "david@propertydeals.com",
          phone: "(415) 555-9876",
          website: "https://davidchen.realtor"
        }),
        specialties: ["Commercial Properties", "Office Space", "Retail", "Multi-Use Development"],
        areas: ["San Francisco", "Oakland", "Palo Alto", "San Jose"],
        socialLinks: JSON.stringify({
          twitter: "https://twitter.com/davidchenrealtor",
          linkedin: "https://linkedin.com/in/davidchenrealtor"
        }),
        stats: JSON.stringify({
          dealsClosed: 23,
          activeListings: 6,
          rating: 4.7,
          reviewCount: 18,
          responseRate: 92
        })
      },
      {
        name: "Sarah Wilson",
        title: "Residential Specialist",
        avatar: "https://images.unsplash.com/photo-1580489944761-15a19d654956",
        banner: "https://images.unsplash.com/photo-1560185007-c5ca9d2c014d",
        verified: true,
        topRep: false,
        pdCertified: false,
        location: "Austin, TX",
        company: "Austin Home Finders",
        companyUrl: "https://austinhomefinders.com",
        memberSince: oneYearAgo,
        bio: "I focus on helping first-time homebuyers and investors find the perfect properties in Austin's competitive market. My deep knowledge of local neighborhoods and upcoming developments gives my clients an edge in identifying properties with high growth potential.",
        available: true,
        contactInfo: JSON.stringify({
          email: "sarah@propertydeals.com",
          phone: "(512) 555-3456",
          website: "https://sarahwilson.realtor"
        }),
        specialties: ["First-Time Homebuyers", "Investment Properties", "Urban Condos", "Suburban Homes"],
        areas: ["Downtown Austin", "South Congress", "East Austin", "Cedar Park"],
        socialLinks: JSON.stringify({
          facebook: "https://facebook.com/sarahwilsonrealtor",
          instagram: "https://instagram.com/sarahwilsonrealtor"
        }),
        stats: JSON.stringify({
          dealsClosed: 31,
          activeListings: 9,
          rating: 4.6,
          reviewCount: 24,
          responseRate: 90
        })
      }
    ];
    
    // Add REPs to storage
    sampleReps.forEach((rep, index) => {
      const id = index + 1; // Start from ID 1
      this.currentRepId = id + 1; // Update counter
      
      const now = new Date();
      this.reps.set(id, {
        ...rep,
        id,
        createdAt: now,
        updatedAt: now
      });
      
      // Generate sample reviews
      this.createSampleReviews(id);
      
      // Generate sample activities
      this.createSampleActivities(id);
      
      // Generate sample connections with other REPs
      this.createSampleConnections(id, sampleReps.length);
    });
  }
  
  private createSampleReviews(repId: number) {
    const reviewsCount = Math.floor(Math.random() * 5) + 3; // 3-7 reviews
    
    const reviewerNames = [
      "John Smith", "Emily Davis", "Robert Johnson", "Maria Garcia", 
      "James Brown", "Lisa Wilson", "Michael Lee", "Amanda Taylor"
    ];
    
    const reviewComments = [
      "Excellent service! Found me exactly what I was looking for.",
      "Very knowledgeable about the market and investment strategies.",
      "Responsive and professional. Made the whole process smooth.",
      "Great negotiator! Got me a better deal than I expected.",
      "Helped me find an amazing off-market property.",
      "Their market insights were invaluable for my investment decisions.",
      "Thorough, detailed, and always available to answer questions.",
      "Has great connections in the industry, which made everything easier."
    ];
    
    for (let i = 0; i < reviewsCount; i++) {
      const nameIndex = Math.floor(Math.random() * reviewerNames.length);
      const commentIndex = Math.floor(Math.random() * reviewComments.length);
      const rating = (Math.floor(Math.random() * 15) + 35) / 10; // 3.5-5.0
      const date = new Date();
      date.setDate(date.getDate() - Math.floor(Math.random() * 180)); // Random date in last 6 months
      
      const review: RepReview = {
        id: this.currentRepReviewId++,
        repId,
        userId: null,
        name: reviewerNames[nameIndex],
        avatar: `https://i.pravatar.cc/150?u=${nameIndex}${repId}`,
        rating,
        comment: reviewComments[commentIndex],
        date,
        verified: Math.random() > 0.3, // 70% chance of being verified
        helpfulCount: Math.floor(Math.random() * 15),
        relationship: Math.random() > 0.5 ? "Client" : "Colleague"
      };
      
      this.repReviews.set(review.id, review);
    }
  }
  
  private createSampleActivities(repId: number) {
    const activitiesCount = Math.floor(Math.random() * 8) + 5; // 5-12 activities
    
    const activityTypes = ["post", "listing", "deal", "comment", "market_update"];
    
    const activityContents = [
      "Just listed a new property in downtown!",
      "Closed another successful deal for my client.",
      "Check out this market update on property trends.",
      "Hosting an open house this weekend.",
      "Just completed another successful rehab project.",
      "Excited to announce a new partnership.",
      "Published new investment strategies article.",
      "Joined a real estate mastermind group."
    ];
    
    for (let i = 0; i < activitiesCount; i++) {
      const typeIndex = Math.floor(Math.random() * activityTypes.length);
      const contentIndex = Math.floor(Math.random() * activityContents.length);
      const timestamp = new Date();
      timestamp.setDate(timestamp.getDate() - Math.floor(Math.random() * 30)); // Random date in last month
      
      const activity: RepActivity = {
        id: this.currentRepActivityId++,
        repId,
        type: activityTypes[typeIndex],
        content: activityContents[contentIndex],
        timestamp,
        relatedId: Math.random() > 0.5 ? Math.floor(Math.random() * 10) + 1 : null,
        imageUrl: Math.random() > 0.7 ? `https://source.unsplash.com/featured/?realestate,${i}` : null
      };
      
      this.repActivities.set(activity.id, activity);
    }
  }
  
  private createSampleConnections(repId: number, totalReps: number) {
    // Each REP is connected to 1-3 other REPs
    const connectionsCount = Math.min(Math.floor(Math.random() * 3) + 1, totalReps - 1);
    const relationshipTypes = ["colleague", "mentor", "partner", "team member"];
    
    // Create a set of potential connection IDs (all REPs except this one)
    const potentialConnections = new Set<number>();
    for (let i = 1; i <= totalReps; i++) {
      if (i !== repId) {
        potentialConnections.add(i);
      }
    }
    
    // Convert to array for random selection
    const potentialConnectionsArray = Array.from(potentialConnections);
    
    // Select random connections
    for (let i = 0; i < connectionsCount; i++) {
      if (potentialConnectionsArray.length === 0) break;
      
      // Select a random REP to connect with
      const randomIndex = Math.floor(Math.random() * potentialConnectionsArray.length);
      const connectedRepId = potentialConnectionsArray[randomIndex];
      
      // Remove this REP from potential connections to avoid duplicates
      potentialConnectionsArray.splice(randomIndex, 1);
      
      // Select a random relationship type
      const typeIndex = Math.floor(Math.random() * relationshipTypes.length);
      const established = new Date();
      established.setMonth(established.getMonth() - Math.floor(Math.random() * 12)); // Random date in last year
      
      const connection: RepConnection = {
        id: this.currentRepConnectionId++,
        repId,
        connectedRepId,
        established,
        relationshipType: relationshipTypes[typeIndex]
      };
      
      this.repConnections.set(connection.id, connection);
    }
  }

  private initSampleProperties() {
    // Sample properties data
    const sampleProperties: Omit<Property, 'id'>[] = [
      {
        title: "Modern Farmhouse",
        address: "123 Maple Street",
        city: "Milwaukee",
        state: "WI",
        zipCode: "53202",
        price: 459000,
        description: "Beautiful modern farmhouse with spacious rooms and updated kitchen.",
        bedrooms: 4,
        bathrooms: 3,
        squareFeet: 2450,
        lotSize: "0.28 Acres",
        yearBuilt: 2018,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Light Rehab",
        features: ["Hardwood Floors", "Stainless Steel Appliances", "Quartz Countertops"],
        imageUrl: "https://images.unsplash.com/photo-1580587771525-78b9dba3b914",
        sellerId: sellerId,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Colonial Revival",
        address: "456 Oak Avenue",
        city: "Milwaukee",
        state: "WI",
        zipCode: "53202",
        price: 625000,
        description: "Elegant colonial revival with classic architecture and modern amenities.",
        bedrooms: 5,
        bathrooms: 3.5,
        squareFeet: 3200,
        lotSize: "0.35 Acres",
        yearBuilt: 2015,
        propertyType: "Single Family",
        status: "exclusive",
        condition: "Turnkey",
        features: ["Gourmet Kitchen", "Walk-in Closets", "Crown Molding"],
        imageUrl: "https://images.unsplash.com/photo-1592595896616-c37162298647",
        sellerId: sellerId,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Modern Condo",
        address: "789 Pine Court",
        city: "Milwaukee",
        state: "WI",
        zipCode: "53202",
        price: 339900,
        description: "Contemporary condo with urban flair and stunning city views.",
        bedrooms: 2,
        bathrooms: 2,
        squareFeet: 1850,
        lotSize: "N/A",
        yearBuilt: 2020,
        propertyType: "Condo",
        status: "off-market",
        condition: "Turnkey",
        features: ["Floor-to-Ceiling Windows", "Smart Home Technology", "Rooftop Deck"],
        imageUrl: "https://images.unsplash.com/photo-1512917774080-9991f1c4c750",
        sellerId: sellerId,
        createdAt: new Date().toISOString(),
      },
      // Distressed properties
      {
        title: "Foreclosure Opportunity",
        address: "543 Distress Lane",
        city: "Chicago",
        state: "IL",
        zipCode: "60601",
        price: 155000,
        description: "Bank-owned foreclosure in need of TLC. Great bones and structure with enormous potential in an up-and-coming neighborhood.",
        bedrooms: 3,
        bathrooms: 2,
        squareFeet: 1750,
        lotSize: "0.15 Acres",
        yearBuilt: 1976,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Heavy Rehab",
        features: ["Original Hardwood", "Large Basement", "Detached Garage"],
        imageUrl: "https://images.unsplash.com/photo-1582063289852-62e3ba2747f8",
        sellerId: seller2Id,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Handyman Special",
        address: "872 Fixer Upper Street",
        city: "Detroit",
        state: "MI",
        zipCode: "48201",
        price: 89000,
        description: "Diamond in the rough! This property needs work but has amazing potential. Great opportunity for investors or DIY enthusiasts.",
        bedrooms: 4,
        bathrooms: 2,
        squareFeet: 2100,
        lotSize: "0.22 Acres",
        yearBuilt: 1962,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Major Rehab",
        features: ["Original Woodwork", "Full Basement", "Large Lot"],
        imageUrl: "https://images.unsplash.com/photo-1510627489930-0c1b0bfb6785",
        sellerId: seller2Id,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Fire Damaged Investment",
        address: "310 Recovery Road",
        city: "Cleveland",
        state: "OH",
        zipCode: "44113",
        price: 65000,
        description: "Property with fire damage in the rear section. Structural integrity of the main house remains sound. Perfect for experienced flippers.",
        bedrooms: 3,
        bathrooms: 1.5,
        squareFeet: 1680,
        lotSize: "0.18 Acres",
        yearBuilt: 1958,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Major Rehab",
        features: ["Brick Exterior", "Full Attic", "Corner Lot"],
        imageUrl: "https://images.unsplash.com/photo-1628624747186-a941c476b7ef",
        sellerId: sellerId,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Abandoned Victorian",
        address: "1245 Heritage Avenue",
        city: "Pittsburgh",
        state: "PA",
        zipCode: "15222",
        price: 125000,
        description: "Historic Victorian that's been vacant for 5 years. Needs complete renovation but retains original architectural details worth preserving.",
        bedrooms: 5,
        bathrooms: 2,
        squareFeet: 2850,
        lotSize: "0.25 Acres",
        yearBuilt: 1897,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Historic Rehab",
        features: ["Original Woodwork", "Pocket Doors", "Stained Glass"],
        imageUrl: "https://images.unsplash.com/photo-1570129477492-45c003edd2be",
        sellerId: seller2Id,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Water Damaged Bungalow",
        address: "578 Leaky Roof Road",
        city: "Indianapolis",
        state: "IN",
        zipCode: "46201",
        price: 78500,
        description: "Charming bungalow with water damage from a roof leak. Property has been remediated and is now dry, ready for renovation.",
        bedrooms: 2,
        bathrooms: 1,
        squareFeet: 1250,
        lotSize: "0.12 Acres",
        yearBuilt: 1945,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Medium Rehab",
        features: ["Original Moldings", "Hardwood Under Carpet", "Unfinished Basement"],
        imageUrl: "https://images.unsplash.com/photo-1575517111839-3a3843ee7f5d",
        sellerId: sellerId,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Neglected Ranch House",
        address: "1032 Forgotten Lane",
        city: "Columbus",
        state: "OH",
        zipCode: "43215",
        price: 110000,
        description: "Ranch-style home that's been neglected for years. Solid foundation but needs all new systems and cosmetic updates throughout.",
        bedrooms: 3,
        bathrooms: 1.5,
        squareFeet: 1580,
        lotSize: "0.3 Acres",
        yearBuilt: 1964,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Medium Rehab",
        features: ["Large Backyard", "Single-Level Living", "Attached Garage"],
        imageUrl: "https://images.unsplash.com/photo-1627843240167-b1f9a9f0c0f7",
        sellerId: seller2Id,
        createdAt: new Date().toISOString(),
      },
      {
        title: "Probate Sale Property",
        address: "421 Estate Circle",
        city: "Cincinnati",
        state: "OH",
        zipCode: "45202",
        price: 96000,
        description: "Estate sale through probate. Home has been vacant for over a year and needs updating throughout, but has great bones and character.",
        bedrooms: 4,
        bathrooms: 2,
        squareFeet: 2200,
        lotSize: "0.24 Acres",
        yearBuilt: 1952,
        propertyType: "Single Family",
        status: "off-market",
        condition: "Light Rehab",
        features: ["Built-ins", "Fireplace", "Mature Trees"],
        imageUrl: "https://images.unsplash.com/photo-1568605114967-8130f3a36994",
        sellerId: sellerId,
        createdAt: new Date().toISOString(),
      }
    ];
    
    // Add properties to storage
    sampleProperties.forEach(property => {
      const id = this.currentPropertyId++;
      this.properties.set(id, { ...property, id });
    });
  }

  // User operations
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username,
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentUserId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }

  // Property operations
  async getProperties(): Promise<Property[]> {
    return Array.from(this.properties.values());
  }

  async getProperty(id: number): Promise<Property | undefined> {
    return this.properties.get(id);
  }

  async getPropertyBySeller(sellerId: number): Promise<Property[]> {
    return Array.from(this.properties.values()).filter(
      (property) => property.sellerId === sellerId,
    );
  }

  async createProperty(property: InsertProperty): Promise<Property> {
    const id = this.currentPropertyId++;
    const newProperty: Property = { 
      ...property, 
      id,
      createdAt: new Date().toISOString()
    };
    this.properties.set(id, newProperty);
    return newProperty;
  }

  async updateProperty(id: number, property: Partial<Property>): Promise<Property | undefined> {
    const existingProperty = this.properties.get(id);
    if (!existingProperty) return undefined;

    const updatedProperty = { ...existingProperty, ...property };
    this.properties.set(id, updatedProperty);
    return updatedProperty;
  }

  async deleteProperty(id: number): Promise<boolean> {
    return this.properties.delete(id);
  }

  // Property inquiry operations
  async getPropertyInquiries(propertyId: number): Promise<PropertyInquiry[]> {
    return Array.from(this.propertyInquiries.values()).filter(
      (inquiry) => inquiry.propertyId === propertyId,
    );
  }

  async getSellerInquiries(sellerId: number): Promise<PropertyInquiry[]> {
    const sellerProperties = await this.getPropertyBySeller(sellerId);
    const propertyIds = sellerProperties.map(property => property.id);
    
    return Array.from(this.propertyInquiries.values()).filter(
      (inquiry) => propertyIds.includes(inquiry.propertyId),
    );
  }

  async createPropertyInquiry(inquiry: InsertPropertyInquiry): Promise<PropertyInquiry> {
    const id = this.currentInquiryId++;
    const newInquiry: PropertyInquiry = { 
      ...inquiry, 
      id,
      createdAt: new Date().toISOString()
    };
    this.propertyInquiries.set(id, newInquiry);
    return newInquiry;
  }

  // REP operations
  async getReps(): Promise<Rep[]> {
    return Array.from(this.reps.values());
  }

  async getRep(id: number): Promise<Rep | undefined> {
    return this.reps.get(id);
  }

  async createRep(rep: InsertRep): Promise<Rep> {
    const id = this.currentRepId++;
    const now = new Date();
    const newRep: Rep = {
      ...rep,
      id,
      createdAt: now,
      updatedAt: now,
      memberSince: rep.memberSince || now,
    };
    this.reps.set(id, newRep);
    return newRep;
  }

  async updateRep(id: number, rep: Partial<Rep>): Promise<Rep | undefined> {
    const existingRep = this.reps.get(id);
    if (!existingRep) return undefined;

    const updatedRep = { 
      ...existingRep, 
      ...rep, 
      updatedAt: new Date() 
    };
    this.reps.set(id, updatedRep);
    return updatedRep;
  }

  // REP review operations
  async getRepReviews(repId: number): Promise<RepReview[]> {
    return Array.from(this.repReviews.values()).filter(
      (review) => review.repId === repId
    );
  }

  async createRepReview(review: InsertRepReview): Promise<RepReview> {
    const id = this.currentRepReviewId++;
    const newReview: RepReview = {
      ...review,
      id,
      date: new Date(),
    };
    this.repReviews.set(id, newReview);
    
    // Update the rep's rating and review count
    const rep = this.reps.get(review.repId);
    if (rep) {
      const reviews = await this.getRepReviews(review.repId);
      const avgRating = reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length;
      
      // Parse stats if it's a string, otherwise create a new object
      const stats = typeof rep.stats === 'string' ? JSON.parse(rep.stats) : (rep.stats || {});
      stats.rating = avgRating;
      stats.reviewCount = reviews.length;
      
      // Convert stats back to string if needed
      if (typeof rep.stats === 'string') {
        rep.stats = JSON.stringify(stats);
      } else {
        rep.stats = stats;
      }
      
      this.reps.set(review.repId, { ...rep, updatedAt: new Date() });
    }
    
    return newReview;
  }

  // REP listings operations
  async getRepListings(repId: number): Promise<RepListing[]> {
    return Array.from(this.repListings.values()).filter(
      (listing) => listing.repId === repId
    );
  }

  async createRepListing(listing: InsertRepListing): Promise<RepListing> {
    const id = this.currentRepListingId++;
    const newListing: RepListing = {
      ...listing,
      id,
      listedDate: new Date(),
    };
    this.repListings.set(id, newListing);
    
    // Update the rep's active listings count
    const rep = this.reps.get(listing.repId);
    if (rep) {
      const stats = typeof rep.stats === 'string' ? JSON.parse(rep.stats) : (rep.stats || {});
      stats.activeListings = (stats.activeListings || 0) + 1;
      
      if (typeof rep.stats === 'string') {
        rep.stats = JSON.stringify(stats);
      } else {
        rep.stats = stats;
      }
      
      this.reps.set(listing.repId, { ...rep, updatedAt: new Date() });
    }
    
    return newListing;
  }

  // REP deals operations
  async getRepDeals(repId: number): Promise<RepDeal[]> {
    return Array.from(this.repDeals.values()).filter(
      (deal) => deal.repId === repId
    );
  }

  async createRepDeal(deal: InsertRepDeal): Promise<RepDeal> {
    const id = this.currentRepDealId++;
    const newDeal: RepDeal = {
      ...deal,
      id,
    };
    this.repDeals.set(id, newDeal);
    
    // Update the rep's deals closed count
    const rep = this.reps.get(deal.repId);
    if (rep) {
      const stats = typeof rep.stats === 'string' ? JSON.parse(rep.stats) : (rep.stats || {});
      stats.dealsClosed = (stats.dealsClosed || 0) + 1;
      
      if (typeof rep.stats === 'string') {
        rep.stats = JSON.stringify(stats);
      } else {
        rep.stats = stats;
      }
      
      this.reps.set(deal.repId, { ...rep, updatedAt: new Date() });
    }
    
    return newDeal;
  }

  // REP activity operations
  async getRepActivity(repId: number): Promise<RepActivity[]> {
    return Array.from(this.repActivities.values())
      .filter((activity) => activity.repId === repId)
      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
  }

  async createRepActivity(activity: InsertRepActivity): Promise<RepActivity> {
    const id = this.currentRepActivityId++;
    const newActivity: RepActivity = {
      ...activity,
      id,
      timestamp: new Date(),
    };
    this.repActivities.set(id, newActivity);
    return newActivity;
  }

  // REP connections operations
  async getRepConnections(repId: number): Promise<RepConnection[]> {
    return Array.from(this.repConnections.values()).filter(
      (connection) => connection.repId === repId
    );
  }

  async createRepConnection(connection: InsertRepConnection): Promise<RepConnection> {
    const id = this.currentRepConnectionId++;
    const newConnection: RepConnection = {
      ...connection,
      id,
      established: new Date(),
    };
    this.repConnections.set(id, newConnection);
    return newConnection;
  }
}

export const storage = new MemStorage();
